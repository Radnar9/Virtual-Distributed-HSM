
@misc{ibmsec2022,
   author = {Ponemon Institute},
   year={2022 IBM Security Report},
   howpublished = {\url{https://www.csoonline.com/article/573315/average-cost-of-data-breaches-hits-record-high-of-435-million/-ibm.html}},
   note = {[Online - Accessed on 2024-07-19]}
}

@mastersthesis{rosahsmthesis,
    title    = {Virtual HSM: Building a Hardware-backed Dependable Cryptographic Store},
    school   = {Faculdade de Ciências e Tecnologia, Universidade Nova de Lisboa},
    author   = {Miguel Rosa},
    year     = {2019}
}

@misc{softhsm,
   title = {{SoftHSM. Version: 2.6.1}},
   author = {OpenDNSSEC},
   year={2020},
   howpublished = {\url{https://www.opendnssec.org/softhsm/}},
   note = {[Online - Accessed on 2024-07-25]}
}

@inproceedings{pmhsm,
    author = {Cifuentes, Francisco and Hevia, Alejandro and Montoto, Francisco and Barros, Tom\'{a}s and Ramiro, Victor and Bustos-Jim\'{e}nez, Javier},
    title = {{Poor Man's Hardware Security Module (pmHSM): A Threshold Cryptographic Backend for DNSSEC}},
    year = {2016},
    isbn = {9781450345910},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    doi = {10.1145/2998373.2998452},
    booktitle = {Proceedings of the 9th Latin America Networking Conference},
    pages = {59–64},
    numpages = {6},
    keywords = {Virtual HSM, DNSSEC, Threshold Cryptography},
    location = {Valparaiso, Chile},
    series = {LANC '16}
}

@misc{intelsgx,
  author = {Victor Costan and Srinivas Devadas},
  title = {{Intel SGX Explained}},
  howpublished = {Cryptology ePrint Archive, Paper 2016/086},
  year = {2016},
  url = {https://eprint.iacr.org/2016/086}
}

@misc{pkcs11spec,
  title = {{PKCS\#11 Specification. Version 3.1}},
  author = {OASIS-Open},
  year = {2023},
  howpublished = {\url{https://docs.oasis-open.org/pkcs11/pkcs11-spec/v3.1/pkcs11-spec-v3.1.pdf}}
}

@inproceedings{cobra,
  author={Vassantlal, Robin and Alchieri, Eduardo and Ferreira, Bernardo and Bessani, Alysson},
  booktitle={2022 IEEE Symposium on Security and Privacy (SP)}, 
  title={{COBRA: Dynamic Proactive Secret Sharing for Confidential BFT Services}}, 
  year={2022},
  pages={1335-1353},
  publisher={IEEE Computer Society},
  address={San Francisco, CA, USA},
  doi={10.1109/SP46214.2022.9833658}
}

@misc{hsmdefinition,
   author = {Encryption-Consulting},
   year={{What is an HSM?}},
   howpublished = {\url{https://www.encryptionconsulting.com/education-center/what-is-an-hsm/}},
   note = {[Online - Accessed on 2024-07-22]}
}

@misc{pcissc,
   title = {{PCI Security Standards Council Updates Hardware Security Module Standard}},
   author = {PCI-SSC},
   year={2021},
   howpublished = {\url{https://www.pcisecuritystandards.org/about\_us/press\_releases/pci-security-standards-council-updates-hardware-security-mo/dule-standard/}},
   note = {[Online - Accessed on 2024-07-24]}
}

@misc{commoncriteria,
   title = {{CC Portal}},
   author = {Common Criteria},
   year={2009},
   howpublished = {\url{https://www.commoncriteriaportal.org/index.cfm}},
   note = {[Online - Accessed on 2024-07-25]}
}

@misc{fips140,
   title = {{FIPS 140-3: Security Requirements for Cryptographic Modules}},
   author = {NIST},
   year={2019},
   howpublished = {\url{https://csrc.nist.gov/pubs/fips/140-3/final}},
   note = {[Online - Accessed on 2024-07-25]}
}

@misc{fipslevels,
   title = {{FIPS 140-3: Certification and Levels}},
   author = {Janki Mehta},
   year={2021},
   howpublished = {\url{https://signmycode.com/blog/fips-140-3-certification-and-levels-fips-140-2-vs-140-3}},
   note = {[Online - Accessed on 2024-07-25]}
}

@misc{commoncriteriacert,
  title = {{Pre-defined packages of security requirements}},
  author = {Common Criteria},
  year = {2022},
  howpublished = {\url{https://www.commoncriteriaportal.org/files/ccfiles/CC2022PART5R1.pdf}} 
}























@inproceedings{cryptowalletreview,
  author={Suratkar, Saurabh and Shirole, Mahesh and Bhirud, Sunil},
  booktitle={2020 4th International Conference on Computer, Communication and Signal Processing (ICCCSP)}, 
  title={Cryptocurrency Wallet: A Review}, 
  year={2020},
  volume={},
  number={},
  pages={1-7},
  doi={10.1109/ICCCSP49186.2020.9315193}
}


@inproceedings{dise,
    author = {Agrawal, Shashank and Mohassel, Payman and Mukherjee, Pratyay and Rindal, Peter},
    title = {{DiSE: Distributed Symmetric-Key Encryption}},
    year = {2018},
    isbn = {9781450356930},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3243734.3243774},
    abstract = {Threshold cryptography provides a mechanism for protecting secret keys by sharing them among multiple parties, who then jointly perform cryptographic operations. An attacker who corrupts up to a threshold number of parties cannot recover the secrets or violate security. Prior works in this space have mostly focused on definitions and constructions for public-key cryptography and digital signatures, and thus do not capture the security concerns and efficiency challenges of symmetric-key based applications which commonly use long-term (unprotected) master keys to protect data at rest, authenticate clients on enterprise networks, and secure data and payments on IoT devices. We put forth the first formal treatment for distributed symmetric-key encryption, proposing new notions of correctness, privacy and authenticity in presence of malicious attackers. We provide strong and intuitive game-based definitions that are easy to understand and yield efficient constructions. We propose a generic construction of threshold authenticated encryption based on any distributed pseudorandom function (DPRF). When instantiated with the two different DPRF constructions proposed by Naor, Pinkas and Reingold (Eurocrypt 1999) and our enhanced versions, we obtain several efficient constructions meeting different security definitions. We implement these variants and provide extensive performance comparisons. Our most efficient instantiation uses only symmetric-key primitives and achieves a throughput of upto 1 million encryptions/decryptions per seconds, or alternatively a sub-millisecond latency with upto 18 participating parties.},
    booktitle = {Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security},
    pages = {1993–2010},
    numpages = {18},
    keywords = {secret management systems, distributed pseudo-random functions, threshold cryptography, authenticated encryption},
    location = {Toronto, Canada},
    series = {CCS '18}
}

@article{shamir,
    author = {Shamir, Adi},
    title = {{How to Share a Secret}},
    year = {1979},
    issue_date = {Nov. 1979},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {22},
    number = {11},
    issn = {0001-0782},
    doi = {10.1145/359168.359176},
    abstract = {In this paper we show how to divide data D into n pieces in such a way that D is easily reconstructable from any k pieces, but even complete knowledge of k - 1 pieces reveals absolutely no information about D. This technique enables the construction of robust key management schemes for cryptographic systems that can function securely and reliably even when misfortunes destroy half the pieces and security breaches expose all but one of the remaining pieces.},
    journal = {Commun. ACM},
    month = {nov},
    pages = {612–613},
    numpages = {2},
    keywords = {interpolation, key management, cryptography}
}

@inproceedings{feldman,
  author={Feldman, Paul},
  booktitle={28th Annual Symposium on Foundations of Computer Science (sfcs 1987)}, 
  title={{A practical scheme for non-interactive verifiable secret sharing}}, 
  year={1987},
  volume={},
  number={},
  pages={427-438},
  doi={10.1109/SFCS.1987.4}
}


@inproceedings{depspace,
    author = {Bessani, Alysson Neves and Alchieri, Eduardo Pelison and Correia, Miguel and Fraga, Joni Silva},
    title = {{DepSpace: A Byzantine Fault-Tolerant Coordination Service}},
    year = {2008},
    isbn = {9781605580135},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    doi = {10.1145/1352592.1352610},
    abstract = {The tuple space coordination model is one of the most interesting coordination models for open distributed systems due to its space and time decoupling and its synchronization power. Several works have tried to improve the dependability of tuple spaces through the use of replication for fault tolerance and access control for security. However, many practical applications in the Internet require both fault tolerance and security. This paper describes the design and implementation of DepSpace, a Byzantine fault-tolerant coordination service that provides a tuple space abstraction. The service offered by DepSpace is secure, reliable and available as long as less than a third of service replicas are faulty. Moreover, the content-addressable confidentiality scheme developed for DepSpace bridges the gap between Byzantine fault-tolerant replication and confidentiality of replicated data and can be used in other systems that store critical data.},
    booktitle = {Proceedings of the 3rd ACM SIGOPS/EuroSys European Conference on Computer Systems 2008},
    pages = {163–176},
    numpages = {14},
    keywords = {tuple space, confidentiality, byzantine fault tolerance},
    location = {Glasgow, Scotland UK},
    series = {Eurosys '08}
}

@article{partiallysynchronous,
    author = {Dwork, Cynthia and Lynch, Nancy and Stockmeyer, Larry},
    title = {{Consensus in the Presence of Partial Synchrony}},
    year = {1988},
    issue_date = {April 1988},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {35},
    number = {2},
    issn = {0004-5411},
    doi = {10.1145/42282.42283},
    abstract = {The concept of partial synchrony in a distributed system is introduced. Partial synchrony lies between the cases of a synchronous system and an asynchronous system. In a synchronous system, there is a known fixed upper bound Δ on the time required for a message to be sent from one processor to another and a known fixed upper bound Φ on the relative speeds of different processors. In an asynchronous system no fixed upper bounds Δ and Φ exist. In one version of partial synchrony, fixed bounds Δ and Φ exist, but they are not known a priori. The problem is to design protocols that work correctly in the partially synchronous system regardless of the actual values of the bounds Δ and Φ. In another version of partial synchrony, the bounds are known, but are only guaranteed to hold starting at some unknown time T, and protocols must be designed to work correctly regardless of when time T occurs. Fault-tolerant consensus protocols are given for various cases of partial synchrony and various fault models. Lower bounds that show in most cases that our protocols are optimal with respect to the number of faults tolerated are also given. Our consensus protocols for partially synchronous processors use new protocols for fault-tolerant “distributed clocks” that allow partially synchronous processors to reach some approximately common notion of time.},
    journal = {J. ACM},
    month = {apr},
    pages = {288–323},
    numpages = {36}
}

@inproceedings{bftsmart,
  author={Bessani, Alysson and Sousa, João and Alchieri, Eduardo E.P.},
  booktitle={2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks}, 
  title={{State Machine Replication for the Masses with BFT-SMART}}, 
  year={2014},
  pages={355-362},
  doi={10.1109/DSN.2014.43}
}

@article{mpss,
    author = {Schultz, David and Liskov, Barbara and Liskov, Moses},
    title = {{MPSS: Mobile Proactive Secret Sharing}},
    year = {2010},
    issue_date = {December 2010},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {13},
    number = {4},
    issn = {1094-9224},
    doi = {10.1145/1880022.1880028},
    abstract = {This article describes MPSS, a new way to do proactive secret sharing. MPSS provides mobility: The group of nodes holding the shares of the secret can change at each resharing, which is essential in a long-lived system. MPSS additionally allows the number of tolerated faulty shareholders to change when the secret is moved so that the system can tolerate more (or fewer) corruptions; this allows reconfiguration on-the-fly to accommodate changes in the environment.MPSS includes an efficient protocol that is intended to be used in practice. The protocol is optimized for the common case of no or few failures, but degradation when there are more failures is modest. MPSS contains a step in which nodes accuse proposals made by other nodes; we show a novel way to handle these accusations when their verity cannot be known. We also present a way to produce accusations that can be verified without releasing keys of other nodes; verifiable accusations improve the performance of MPSS, and are a useful primitive independent of MPSS.},
    journal = {ACM Trans. Inf. Syst. Secur.},
    month = {dec},
    articleno = {34},
    numpages = {32}
}



@misc{softhsmgithub,
   author = {OpenDNSSEC},
   title={{SoftHSMv2 GitHub}},
   year={},
   howpublished = {\url{https://github.com/opendnssec/SoftHSMv2}},
   note = {[Online - Accessed on 2024-07-25]}
}



@inproceedings{practicalthresholdsignatures,
    author = {Shoup, Victor},
    title = {{Practical Threshold Signatures}},
    year = {2000},
    isbn = {3540675175},
    publisher = {Springer-Verlag},
    address = {Berlin, Heidelberg},
    abstract = {We present an RSA threshold signature scheme. The scheme enjoys the following properties: 1. it is unforgeable and robust in the random oracle model, assuming the RSA problem is hard; 2. signature share generation and verification is completely non-interactive; 3. the size of an individual signature share is bounded by a constant times the size of the RSA modulus.},
    booktitle = {Proceedings of the 19th International Conference on Theory and Application of Cryptographic Techniques},
    pages = {207–220},
    numpages = {14},
    location = {Bruges, Belgium},
    series = {EUROCRYPT'00}
}


@misc{ecdsasurvey,
  author = {Jean-Philippe Aumasson and Adrian Hamelink and Omer Shlomovits},
  title = {{A Survey of ECDSA Threshold Signing}},
  howpublished = {Cryptology ePrint Archive, Paper 2020/1390},
  year = {2020},
  url = {https://eprint.iacr.org/2020/1390}
}


@inproceedings{lindell18,
    author = {Lindell, Yehuda and Nof, Ariel},
    title = {{Fast Secure Multiparty ECDSA with Practical Distributed Key Generation and Applications to Cryptocurrency Custody}},
    year = {2018},
    isbn = {9781450356930},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    doi = {10.1145/3243734.3243788},
    abstract = {ECDSA is a standardized signing algorithm that is widely used in TLS, code signing, cryptocurrency and more. Due to its importance, the problem of securely computing ECDSA in a distributed manner (known as threshold signing) has received considerable interest. However, despite this interest, there is still no full threshold solution for more than 2 parties (meaning that any t -out-of- n parties can sign, security is preserved for any t-1 or fewer corrupted parties, and t\l{}eq n can be any value thus supporting an honest minority) that has practical key distribution. This is due to the fact that all previous solutions for this utilize Paillier homomorphic encryption, and efficient distributed Paillier key generation for more than two parties is not known. In this paper, we present the first truly practical full threshold ECDSA signing protocol that has both fast signing and fast key distribution. This solves a years-old open problem, and opens the door to practical uses of threshold ECDSA signing that are in demand today. One of these applications is the construction of secure cryptocurrency wallets (where key shares are spread over multiple devices and so are hard to steal) and cryptocurrency custody solutions (where large sums of invested cryptocurrency are strongly protected by splitting the key between a bank/financial institution, the customer who owns the currency, and possibly a third-party trustee, in multiple shares at each). There is growing practical interest in such solutions, but prior to our work these could not be deployed today due to the need for distributed key generation.},
    booktitle = {Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security},
    pages = {1837–1854},
    numpages = {18},
    keywords = {ECDSA, secure multiparty computation, threshold cryptography},
    location = {Toronto, Canada},
    series = {CCS '18}
}

@inproceedings{gennaro18,
    author = {Gennaro, Rosario and Goldfeder, Steven},
    title = {{Fast Multiparty Threshold ECDSA with Fast Trustless Setup}},
    year = {2018},
    isbn = {9781450356930},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    doi = {10.1145/3243734.3243859},
    abstract = {A threshold signature scheme enables distributed signing among n players such that any subgroup of size $t+1$ can sign, whereas any group with t or fewer players cannot. While there exist previous threshold schemes for the ECDSA signature scheme, we are the first protocol that supports multiparty signatures for any $t \l{}eq n$ with an efficient dealerless key generation. Our protocol is faster than previous solutions and significantly reduces the communication complexity as well. We prove our scheme secure against malicious adversaries with a dishonest majority. We implemented our protocol, demonstrating its efficiency and suitability to be deployed in practice.},
    booktitle = {Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security},
    pages = {1179–1194},
    numpages = {16},
    keywords = {threshold signatures, multiparty computation, digital signatures, cryptpgraphy, bitcoin},
    location = {Toronto, Canada},
    series = {CCS '18}
}

@inproceedings{gennaro20,
    author = {Canetti, Ran and Gennaro, Rosario and Goldfeder, Steven and Makriyannis, Nikolaos and Peled, Udi},
    title = {{UC Non-Interactive, Proactive, Threshold ECDSA with Identifiable Aborts}},
    year = {2020},
    isbn = {9781450370899},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    doi = {10.1145/3372297.3423367},
    abstract = {Building on the Gennaro \& Goldfeder and Lindell \& Nof protocols (CCS '18), we present two threshold ECDSA protocols, for any number of signatories and any threshold, that improve as follows over the state of the art: -- For both protocols, only the last round requires knowledge of the message, and the other rounds can take place in a preprocessing stage, lending to a non-interactive threshold ECDSA protocol. -- Both protocols withstand adaptive corruption of signatories. Furthermore, they include a periodic refresh mechanism and offer full proactive security. -- Both protocols realize an ideal threshold signature functionality within the UC framework, in the global random oracle model, assuming Strong RSA, DDH, semantic security of the Paillier encryption, and a somewhat enhanced variant of existential unforgeability of ECDSA. -- Both protocols achieve accountability by identifying corrupted parties in case of failure to generate a valid signature. The two protocols are distinguished by the round-complexity and the identification process for detecting cheating parties. Namely: -- For the first protocol, signature generation takes only 4 rounds (down from the current state of the art of 8 rounds), but the identification process requires computation and communication that is quadratic in the number of parties. -- For the second protocol, the identification process requires computation and communication that is only linear in the number of parties, but signature generation takes 7 rounds. These properties (low latency, compatibility with cold-wallet architectures, proactive security, identifiable abort and composable security) make the two protocols ideal for threshold wallets for ECDSA-based cryptocurrencies.},
    booktitle = {Proceedings of the 2020 ACM SIGSAC Conference on Computer and Communications Security},
    pages = {1769–1787},
    numpages = {19},
    keywords = {security with abort, ECDSA, signatures, threshold cryptography, adaptive security, blockchain, composability, cryptocurrencies, malicious adversaries},
    location = {Virtual Event, USA},
    series = {CCS '20}
}


@misc{frost,
  author = {Chelsea Komlo and Ian Goldberg},
  title = {{FROST: Flexible Round-Optimized Schnorr Threshold Signatures}},
  howpublished = {Cryptology ePrint Archive, Paper 2020/852},
  year = {2020},
  url = {https://eprint.iacr.org/2020/852}
}

@misc{frost3plus,
  author = {Hien Chu and Paul Gerhart and Tim Ruffing and Dominique Schröder},
  title = {{Practical Schnorr Threshold Signatures Without the Algebraic Group Model}},
  howpublished = {Cryptology ePrint Archive, Paper 2023/899},
  year = {2023},
  doi = {10.1007/978-3-031-38557-5_24},
  url = {https://eprint.iacr.org/2023/899}
}

@inproceedings{frost3,
    author = {Ruffing, Tim and Ronge, Viktoria and Jin, Elliott and Schneider-Bensch, Jonas and Schr\"{o}der, Dominique},
    title = {{ROAST: Robust Asynchronous Schnorr Threshold Signatures}},
    year = {2022},
    isbn = {9781450394505},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    doi = {10.1145/3548606.3560583},
    abstract = {Bitcoin and other cryptocurrencies have recently introduced support for Schnorr signatures whose cleaner algebraic structure, as compared to ECDSA, allows for simpler and more practical constructions of highly demanded ''t-of-n'' threshold signatures. However, existing Schnorr threshold signature schemes still fall short of the needs of real-world applications due to their assumption that the network is synchronous and due to their lack of robustness, i.e., the guarantee that t honest signers are able to obtain a valid signature even in the presence of other malicious signers who try to disrupt the protocol. This hinders the adoption of threshold signatures in the cryptocurrency ecosystem, e.g., in second-layer protocols built on top of cryptocurrencies.In this work, we propose ROAST, a simple wrapper that turns a given threshold signature scheme into a scheme with a robust and asynchronous signing protocol, as long as the underlying signing protocol is semi-interactive (i.e., has one preprocessing round and one actual signing round), provides identifiable aborts, and is unforgeable under concurrent signing sessions. When applied to the state-of-the-art Schnorr threshold signature scheme FROST, which fulfills these requirements, we obtain a simple, efficient, and highly practical Schnorr threshold signature scheme.},
    booktitle = {Proceedings of the 2022 ACM SIGSAC Conference on Computer and Communications Security},
    pages = {2551–2564},
    numpages = {14},
    keywords = {threshold signatures, frost, schnorr signatures, robustness},
    location = {Los Angeles, CA, USA},
    series = {CCS '22}
}

@techreport{frostdraft,
    type =      {Internet-Draft},
    institution =   {Internet Engineering Task Force},
    publisher = {Internet Engineering Task Force},
    url =       {https://datatracker.ietf.org/doc/draft-irtf-cfrg-frost/15/},
    author =    {Deirdre Connolly and Chelsea Komlo and Ian Goldberg and Christopher A. Wood},
    title =     {{Two-Round Threshold Schnorr Signatures with FROST}},
    pagetotal = 60,
    year =      2023,
    month =     sep,
    day =       18,
    abstract =  {This document specifies the Flexible Round-Optimized Schnorr Threshold (FROST) signing protocol. FROST signatures can be issued after a threshold number of entities cooperate to compute a signature, allowing for improved distribution of trust and redundancy with respect to a secret key. FROST depends only on a prime-order group and cryptographic hash function. This document specifies a number of ciphersuites to instantiate FROST using different prime- order groups and hash functions. One such ciphersuite can be used to produce signatures that can be verified with an Edwards-Curve Digital Signature Algorithm (EdDSA, as defined in RFC8032) compliant verifier. However, unlike EdDSA, the signatures produced by FROST are not deterministic. This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.},
}


@techreport{blsdraft,
    type =      {Internet-Draft},
    institution =   {Internet Engineering Task Force},
    publisher = {Internet Engineering Task Force},
    url =       {https://www.ietf.org/archive/id/draft-irtf-cfrg-bls-signature-05.html},
    author =    {Dan Boneh and Sergey Gorbunov and Riad S. Wahby and Hoeteck Wee and Christopher A. Wood and Zhenfei Zhang},
    title =     {{BLS Signatures}},
    pagetotal = 31,
    year =      2022,
    month =     jun,
    day =       16,
    abstract =  {BLS is a digital signature scheme with aggregation properties. Given set of signatures (signature\_1, ..., signature\_n) anyone can produce an aggregated signature. Aggregation can also be done on secret keys and public keys. Furthermore, the BLS signature scheme is deterministic, non-malleable, and efficient. Its simplicity and cryptographic properties allows it to be useful in a variety of use cases, specifically when minimal storage space or bandwidth are required.},
}

@inproceedings{blsimproved,
  author={Tomescu, Alin and Chen, Robert and Zheng, Yiming and Abraham, Ittai and Pinkas, Benny and Gueta, Guy Golan and Devadas, Srinivas},
  booktitle={2020 IEEE Symposium on Security and Privacy (SP)}, 
  title={{Towards Scalable Threshold Cryptosystems}}, 
  year={2020},
  volume={},
  number={},
  pages={877-893},
  doi={10.1109/SP40000.2020.00059}
}


@inproceedings{ddh,
    author="Boneh, Dan",
    editor="Buhler, Joe P.",
    title={{The Decision Diffie-Hellman problem}},
    booktitle="Algorithmic Number Theory",
    year="1998",
    publisher="Springer Berlin Heidelberg",
    address="Berlin, Heidelberg",
    pages="48--63",
    abstract="The Decision Diffie-Hellman assumption (ddh) is a gold mine. It enables one to construct efficient cryptographic systems with strong security properties. In this paper we survey the recent applications of DDH as well as known results regarding its security. We describe some open problems in this area.",
    isbn="978-3-540-69113-6"
}

@inproceedings{naor,
  author    = {Moni Naor and Benny Pinkas and Omer Reingold},
  title     = {{Distributed Pseudo-Random Functions and KDCs}},
  booktitle = {EUROCRYPT'99},
  editor    = {J. Stern},
  year      = {1999},
  volume    = {1592},
  series    = {Lecture Notes in Computer Science},
  pages     = {327--346},
  publisher = {Springer},
}


@techreport{aesgcm,
  author = {J. Salowey, A. Choudhury, D. McGrew},
  title = {{AES Galois Counter Mode (GCM) Cipher Suites for TLS}},
  institution = {RFC Editor},
  type = {RFC},
  number = {5288},
  month = aug,
  year = {2008},
}

@inproceedings{amortizeddise,
    author = {Christodorescu, Mihai and Gaddam, Sivanarayana and Mukherjee, Pratyay and Sinha, Rohit},
    title = {{Amortized Threshold Symmetric-Key Encryption}},
    year = {2021},
    isbn = {9781450384544},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    doi = {10.1145/3460120.3485256},
    abstract = {Threshold cryptography enables cryptographic operations while keeping the secret keys distributed at all times. Agrawal et al. (CCS'18) propose a framework for Distributed Symmetric-key Encryption (DiSE). They introduce a new notion of Threshold Symmetric-key Encryption (TSE), in that encryption and decryption are performed by interacting with a threshold number of servers. However, the necessity for interaction on each invocation limits performance when encrypting large datasets, incurring heavy computation and communication on the servers.This paper proposes a new approach to resolve this problem by introducing a new notion called Amortized Threshold Symmetric-key Encryption (ATSE), which allows a "privileged" client (with access to sensitive data) to encrypt a large group of messages using a single interaction. Importantly, our notion requires a client to interact for decrypting each ciphertext, thus providing the same security (privacy and authenticity) guarantee as DiSE with respect to a "not-so-privileged" client. We construct an ATSE scheme based on a new primitive that we formalize as flexible threshold key-derivation (FTKD), which allows parties to interactively derive pseudorandom keys in different modes in a threshold manner. Our FTKD construction, which uses bilinear pairings, is based on a distributed variant of left/right constrained PRF by Boneh and Waters (Asiacrypt'13). Despite our use of bilinear maps, our scheme achieves significant speed-ups due to the amortized interaction. Our experiments show 40x lower latency and 30x more throughput in some settings.},
    booktitle = {Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security},
    pages = {2758–2779},
    numpages = {22},
    keywords = {constraint pseudorandom functions, threshold cryptography, distributed pseudo-random functions, authenticated encryption, secret management systems},
    location = {Virtual Event, Republic of Korea},
    series = {CCS '21}
}

@misc{robustdise,
  author = {Xunhua Wang and Ben Huson},
  title = {{Robust distributed symmetric-key encryption}},
  howpublished = {Cryptology ePrint Archive, Paper 2020/1001},
  year = {2020},
  url = {https://eprint.iacr.org/2020/1001}
}

@inproceedings{paradise,
    author="Agrawal, Shashank
    and Dai, Wei
    and Luykx, Atul
    and Mukherjee, Pratyay
    and Rindal, Peter",
    editor="Isobe, Takanori
    and Sarkar, Santanu",
    title={{ParaDiSE: Efficient Threshold Authenticated Encryption in Fully Malicious Model}},
    booktitle="Progress in Cryptology -- INDOCRYPT 2022",
    year="2022",
    publisher="Springer International Publishing",
    address="Cham",
    pages="26--51",
    abstract="Threshold cryptographic algorithms achieve robustness against key and access compromise by distributing secret keys among multiple entities. Most prior work focuses on threshold public-key primitives, despite extensive use of authenticated encryption in practice. Though the latter can be deployed in a threshold manner using multi-party computation (MPC), doing so incurs a high communication cost. In contrast, dedicated constructions of threshold authenticated encryption algorithms can achieve high performance. However to date, few such algorithms are known, most notably DiSE (distributed symmetric encryption) by Agrawal et al. (ACM CCS 2018). To achieve threshold authenticated encryption (TAE), prior work does not suffice, due to shortcomings in definitions, analysis, and design, allowing for potentially insecure schemes, an undesirable similarity between encryption and decryption, and insufficient understanding of the impact of parameters due to lack of concrete analysis. In response, we revisit the problem of designing secure and efficient TAE schemes. (1) We give new TAE security definitions in the fully malicious setting addressing the aforementioned concerns. (2) We construct efficient schemes satisfying our definitions and perform concrete and more modular security analyses. (3) We conduct an extensive performance evaluation of our constructions, against prior ones.",
    isbn="978-3-031-22912-1"
}



@misc{dkgwild,
  author = {Aniket Kate and Yizhou Huang and Ian Goldberg},
  title = {{Distributed Key Generation in the Wild}},
  howpublished = {Cryptology ePrint Archive, Paper 2012/377},
  year = {2012},
  url = {https://eprint.iacr.org/2012/377}
}



@misc{relicgithub,
    author = {D. F. Aranha and C. P. L. Gouvêa and T. Markmann and R. S. Wahby and K. Liao},      
    title = {{RELIC is an Efficient LIbrary for Cryptography}},
    howpublished = {\url{https://github.com/relic-toolkit/relic}},
}

@misc{siregithub,
    author = {Tiago Carvalho},        
    title = {{SIRE}},
    howpublished = {\url{https://github.com/tiagorncarvalho/SIRE}},
}

@misc{schnorrnotes,
  title={{Notes on threshold EdDSA/Schnorr signatures}},
  author={Brand{\~a}o, LTAN and Davidson, Michael},
  year={2022},
  howpublished = {\url{https://nvlpubs.nist.gov/nistpubs/ir/2022/NIST.IR.8214B.ipd.pdf}},
}

@misc{physicalvscloudhsm,
   title={{On-Premises vs. Cloud HSMs: A Comparison}},
   author = {SSL},
   year={2023},
   howpublished = {\url{https://www.ssl.com/article/on-premises-vs-cloud-hsms-a-comparison/}},
   note = {[Online - Accessed on 2024-07-24]}
}

@misc{hsmeconomics,
   title={{HSM Security with Cloud Like Economics}},
   author = {Bill Hagerstrand},
   howpublished = {\url{https://www.fortanix.com/blog/hsm-security-with-cloud-like-economics}},
   note = {[Online - Accessed on 2024-07-24]}
}

@misc{hsmpen,
   title={{How HSMs Improve Enterprise IT and Data Security}},
   author = {Fortinet},
   howpublished = {\url{https://www.fortinet.com/resources/cyberglossary/hardware-security-module}},
   note = {[Online - Accessed on 2024-07-25]}
}

@misc{hsmrootoftrust,
   title={{What is Root of Trust?}},
   author = {Entrust},
   howpublished = {\url{https://www.entrust.com/resources/learn/what-is-root-of-trust}},
   note = {[Online - Accessed on 2024-07-20]}
}


@misc{cryptothefts2024,
   title={{Crypto hacking thefts double to \$1.4B in first half of 2024}},
   author = {Reuters},
   howpublished = {\url{https://www.reuters.com/technology/crypto-hacking-thefts-double-14-bln-first-half-researchers-\\say-2024-07-05/}},
   note = {[Online - Accessed on 2024-07-25]}
}

@inproceedings{proactivess,
  title={Proactive secret sharing or: How to cope with perpetual leakage},
  author={Herzberg, Amir and Jarecki, Stanis{\l}aw and Krawczyk, Hugo and Yung, Moti},
  booktitle={Advances in Cryptology—CRYPT0’95: 15th Annual International Cryptology Conference Santa Barbara, California, USA, August 27--31, 1995 Proceedings 15},
  pages={339--352},
  year={1995},
  organization={Springer}
}

@article{pvss,
  title={{APSS: Proactive secret sharing in asynchronous systems}},
  author={Zhou, Lidong and Schneider, Fred B and Van Renesse, Robbert},
  journal={ACM transactions on information and system security (TISSEC)},
  volume={8},
  number={3},
  pages={259--286},
  year={2005},
  publisher={ACM New York, NY, USA}
}

%inproceedings{dpvss,
%  title={{CHURP: Dynamic-Committee Proactive Secret Sharing}},
  author={Maram, Sai Krishna Deepak and Zhang, Fan and Wang, Lun and Low, Andrew and Zhang, Yupeng and Juels, Ari and Song, Dawn},
  booktitle={Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security},
  pages={2369--2386},
  year={2019}
}

@misc{schnorradvantages,
   title={{Why digital signatures are essential for blockchains}},
   author = {Coinbase},
   howpublished = {\url{https://www.coinbase.com/en-pt/developer-platform/discover/dev-foundations/digital-signatures}},
   year={2022},
   note = {[Online - Accessed on 2024-07-25]}
}

@misc{blsbetterthanschnorr,
   title={{BLS signatures: better than Schnorr}},
   author = {Stepan},
   howpublished = {\url{https://medium.com/cryptoadvance/bls-signatures-better-than-schnorr-5a7fe30ea716}},
   year={2019},
   note = {[Online - Accessed on 2024-07-25]}
}

@article{smr,
  title={{Implementing fault-tolerant services using the state machine approach: A tutorial}},
  author={Schneider, Fred B},
  journal={ACM Computing Surveys (CSUR)},
  volume={22},
  number={4},
  pages={299--319},
  year={1990},
  publisher={ACM New York, NY, USA}
}

@book{commsmodel,
  title={{Fault-Tolerant Message-Passing Distributed Systems: An Algorithmic Approach}},
  author={Raynal, Michel},
  year={2018},
  publisher={Springer}
}

@inproceedings{pbft,
author = {Castro, Miguel and Liskov, Barbara},
title = {{Practical Byzantine Fault Tolerance}},
year = {1999},
isbn = {1880446391},
publisher = {USENIX Association},
address = {USA},
booktitle = {Proceedings of the Third Symposium on Operating Systems Design and Implementation},
pages = {173–186},
numpages = {14},
location = {New Orleans, Louisiana, USA},
series = {OSDI '99}
}

@article{paxos,
  title={{The Part-time Parliament}},
  author={Lamport, Leslie},
  volume = {16},
  number = {2},
  journal={ACM Transactions on Computer Systems},
  pages = {133-169},
  year={1998},
  issue_date = {May 1998}
}

@inproceedings {raft,
author = {Diego Ongaro and John Ousterhout},
title = {{In Search of an Understandable Consensus Algorithm}},
booktitle = {2014 USENIX Annual Technical Conference (USENIX ATC 14)},
year = {2014},
isbn = {978-1-931971-10-2},
address = {Philadelphia, PA},
pages = {305--319},
url = {https://www.usenix.org/conference/atc14/technical-sessions/presentation/ongaro},
publisher = {USENIX Association},
month = jun
}

@misc{zengowallet,
   title={{Zengo Wallet}},
   author = {Zengo},
   howpublished = {\url{https://zengo.com/security/}},
   note = {[Online - Accessed on 2024-07-25]}
}

@misc{blockdaemonwallet,
   title={{Blockdaemon Wallet}},
   author = {Blockdaemon},
   howpublished = {\url{https://www.blockdaemon.com/wallet}},
   note = {[Online - Accessed on 2024-07-25]}
}

@article{attackingthresholdwallets,
  title={{Attacking Threshold Wallets}},
  author={Aumasson, Jean-Philippe and Shlomovits, Omer},
  journal={Cryptology ePrint Archive},
  year={2020}
}

@INPROCEEDINGS{velinkhsmwallet,
  author={Pirker, Dominic and Fischer, Thomas and Witschnig, Harald and Steger, Christian},
  booktitle={2021 IEEE 5th International Conference on Cryptography, Security and Privacy (CSP)}, 
  title={{velink - A Blockchain-based Shared Mobility Platform for Private and Commercial Vehicles utilizing ERC-721 Tokens}}, 
  year={2021},
  volume={},
  number={},
  pages={62-67},
  keywords={Space vehicles;Privacy;Smart cities;Smart contracts;Blockchain;Market research;Smart transportation;shared mobility;blockchain;smart contract;Ethereum;token;ERC-721;HSM},
  doi={10.1109/CSP51677.2021.9357605}
}

@INPROCEEDINGS{hsmbasedewalleteth,
  author={Shbair, Wazen M. and Gavrilov, Eugene and State, Radu},
  booktitle={2021 IEEE International Conference on Blockchain and Cryptocurrency (ICBC)}, 
  title={{HSM-based Key Management Solution for Ethereum Blockchain}}, 
  year={2021},
  volume={},
  number={},
  pages={1-3},
  keywords={Computer hacking;Conferences;Prototypes;Blockchain;Hardware;Cryptocurrency;Standards},
  doi={10.1109/ICBC51069.2021.9461136}
}

@misc{thresholdhsmgithub,
   title={{Virtual and Distributed Hardware Security Module - GitHub Repository}},
   author = {Diogo Novo},
   howpublished = {\url{https://github.com/Radnar9/Virtual-Distributed-HSM}},
   note = {[Online - Accessed on 2024-07-30]}
}

@article{inforumpublication,
  title={{Hardware Security Modules for Secure Key Management}},
  author={Novo, Diogo and Vassantlal, Robin and Bessani, Alysson and Ferreira, Bernardo},
  journal={INForum 2024},
  year={2024}
}

@misc{awscloudhsmpricing,
   title={{AWS CloudHSM Pricing}},
   author = {AWS},
   howpublished = {\url{https://aws.amazon.com/cloudhsm/pricing/}},
   note = {[Online - Accessed on 2024-09-13]}
}

@misc{nistrsasecurity,
  title={{Recommendation for Key Management: Part 1 – General}},
  author={Elaine Barker},
  year={2020},
  howpublished = {\url{https://csrc.nist.gov/pubs/sp/800/57/pt1/r5/final}},
}

@misc{nistp256security,
  title={{Recommendations for Discrete Logarithm-based Cryptography: Elliptic Curve Domain Parameters}},
  author={Chen, Lily and Moody, Dustin and Randall, Karen and Regenscheid, Andrew and Robinson, Angela},
  year={2023},
  howpublished = {\url{https://csrc.nist.gov/pubs/sp/800/186/final}},
}

@misc{cryptobook,
  title={{Practical Cryptography for Developers}},
  author={Svetlin Nakov},
  year={2020},
  howpublished = {\url{https://cryptobook.nakov.com/}},
}

@misc{nccblssecurity,
  title={{Estimating the Bit Security of Pairing-Friendly Curves}},
  author={Giacomo Pope},
  year={2022},
  howpublished = {\url{https://www.nccgroup.com/us/research-blog/estimating-the-bit-security-of-pairing-friendly-curves/}},
}

@misc{procrypthsm,
  title={{ProCrypt KM-3000 Hardware Security Module}},
  author={Procenne},
  year={2019},
  howpublished = {\url{https://www.commoncriteriaportal.org/files/epfiles/st_procenne_km-3000_hsm_V.1.0.pdf}},
}

@article{goldfederwallets,
  title={{Securing Bitcoin wallets via a new DSA/ECDSA threshold signature scheme}},
  author={Goldfeder, Steven and Gennaro, Rosario and Kalodner, Harry and Bonneau, Joseph and Kroll, Joshua A and Felten, Edward W and Narayanan, Arvind},
  journal={et al},
  year={2015}
}

@article{bip32wallet,
  title={{BIP32-Compatible Threshold Wallets}},
  author={Das, Poulami and Erwig, Andreas and Faust, Sebastian and Loss, Julian and Riahi, Siavash},
  year={2023},
  journal={CISPA}
}

@inproceedings{unstoppablewallet,
  title={{Unstoppable wallets: Chain-assisted threshold ECDSA and its applications}},
  author={Zyskind, Guy and Yanai, Avishay and Pentland, Alex},
  booktitle={Proceedings of the 19th ACM Asia Conference on Computer and Communications Security},
  pages={1844--1860},
  year={2024}
}

@misc{damgard20,
      author = {Ivan Damgård and Thomas Pelle Jakobsen and Jesper Buus Nielsen and Jakob Illeborg Pagter and Michael Bæksvang Østergård},
      title = {{Fast Threshold ECDSA with Honest Majority}},
      howpublished = {Cryptology {ePrint} Archive, Paper 2020/501},
      year = {2020},
      url = {https://eprint.iacr.org/2020/501}
}


@inproceedings{proactivewallet,
  title={Refresh when you wake up: Proactive threshold wallets with offline devices},
  author={Kondi, Yashvanth and Magri, Bernardo and Orlandi, Claudio and Shlomovits, Omer},
  booktitle={2021 IEEE Symposium on Security and Privacy (SP)},
  pages={608--625},
  year={2021},
  organization={IEEE}
}
